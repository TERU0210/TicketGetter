//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.1.0-SNAPSHOT.
// 
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//


package com.example.admin.androidtemplete;

import java.util.List;
import android.support.annotation.NonNull;
import hugo.weaving.DebugLog;
import org.androidannotations.api.BackgroundExecutor;

public final class TimerReceiver_
    extends TimerReceiver
{

    @DebugLog
    @Override
    void initTicket(
        @NonNull
        final String artist) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    TimerReceiver_.super.initTicket(artist);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @DebugLog
    @Override
    void checkTickets(final String artist, final String name) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    TimerReceiver_.super.checkTickets(artist, name);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @DebugLog
    @Override
    void initMail(
        @NonNull
        final String artist,
        @NonNull
        final String name) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    TimerReceiver_.super.initMail(artist, name);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @DebugLog
    @Override
    void removeTicket(final String artist) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    TimerReceiver_.super.removeTicket(artist);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @DebugLog
    @Override
    void sendMail(final String artist, final List<TicketEntity> tickets) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    TimerReceiver_.super.sendMail(artist, tickets);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @DebugLog
    @Override
    void sendMail(final String message) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    TimerReceiver_.super.sendMail(message);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @DebugLog
    @Override
    void createTicket(
        @NonNull
        final Ticket ticket) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    TimerReceiver_.super.createTicket(ticket);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }

    @DebugLog
    @Override
    void updateTicket(final TicketEntity entity) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0L, "") {

            @Override
            public void execute() {
                try {
                    TimerReceiver_.super.updateTicket(entity);
                } catch (final Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }
        }
        );
    }
}
